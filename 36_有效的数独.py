# 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

# 数字 1-9 在每一行只能出现一次。
# 数字 1-9 在每一列只能出现一次。
# 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
# 输入:
# [
#   ["5","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: true

# 思路 一次迭代数独中所有元素 同时进行三个判断
from typing import List
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        row = [[] for i in range(9)]
        column = [[] for i in range(9)]
        box = [[] for i in range(9)]
        for i in range(9):
            for j in range(9):
                if board[i][j] == '.':
                    continue               
                if board[i][j] in row[i]:
                    return False
                if board[i][j] in column[j]:
                    return False
                box_index = (i // 3) * 3 + j//3
                if board[i][j] in box[box_index]:
                    return False                                   
                row[i].append(board[i][j])
                column[j].append(board[i][j])
                box[box_index].append(board[i][j])
        return True

s = Solution()
print(s.isValidSudoku([
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]]))